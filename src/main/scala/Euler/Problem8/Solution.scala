package Euler.Problem8

object Solution extends App{

  val inputNumber: String = "73167176531330624919225119674426574742355349194934" +
    "96983520312774506326239578318016984801869478851843858615607891129494954595" +
    "017379583319528532088055111254069874715852386305071569329096329522744304" +
    "355766896648950445244523161731856403098711121722383113622298934233803081" +
    "353362766142828064444866452387493035890729629049156044077239071381051585" +
    "9307960866701724271218839987979087922749219016997208880937766572733300105" +
    "3367881220235421809751254540594752243525849077116705560136048395864467063" +
    "2441572215539753697817977846174064955149290862569321978468622482839722413" +
    "7565705605749026140797296865241453510047482166370484403199890008895243450" +
    "65854122758866688116427171479924442928230863465674813919123162824586178664" +
    "58359124566529476545682848912883142607690042242190226710556263211111093705" +
    "442175069416589604080719840385096245544436298123098787992724428490918884580" +
    "156166097919133875499200524063689912560717606058861164671094050775410022569" +
    "8315520005593572972571636269561882670428252483600823257530420752963450"

  val inputList: List[Long] = inputNumber.split("").map(x => x.toLong).toList
  println(inputList)


  var biggest: Long = 0
  val it = inputList.iterator.sliding(13)

  while (it.hasNext)
    {
      val n =it.next()
      val c = n.reduce((x: Long, y: Long) => x*y)
      if (c > biggest)
      {
        biggest = c
        println(n)
      }
    }

  println(biggest)
}
